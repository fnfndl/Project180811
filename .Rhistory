#한글이기 때문에 에러남
target <- tm_map(target,removePunctuation)
target <- tm_map(target,PlainTextDocument)
target <- c(stopwords('english'),
target <- c(stopwords('english'),
"수 있는", "같습니다", "싶습니다",
"서울에서", "하고","은","이용했습니다",
"곳이예요")
update.packages(checkBuilt = T,ask=F)
update.packages(checkBuilt = T,ask=F)
library(tm)
library(wordcloud)
target <- readLines("https://www.dropbox.com/s/pramf3psg9cg2wa/%EC%84%9C%EC%9A%B8_%EC%8B%A0%EB%9D%BC%ED%98%B8%ED%85%94%EB%A6%AC%EB%B7%B0.txt?dl=1")
head(target)
target <-  Corpus(VectorSource(target)) #tm에만 맞춰진 클래스로 변경
class(target) #클래스 확인
target <- tm_map(target,stripWhitespace) #빈공간 삭제
#target <- tm_map(target,tolower
#한글이기 때문에 에러남
target <- tm_map(target,removePunctuation) #
target <- tm_map(target,PlainTextDocument) #
target <- c(stopwords('english'),
"수 있는", "같습니다", "싶습니다",
"서울에서", "하고","은","이용했습니다",
"곳이예요") #
findAssocs(target,"신라호텔",0.5) #관계어 찾기 마지막 숫자는 관계도
view(target)
view(target)
head(target)
library(tm)
library(wordcloud)
target <- readLines("https://www.dropbox.com/s/pramf3psg9cg2wa/%EC%84%9C%EC%9A%B8_%EC%8B%A0%EB%9D%BC%ED%98%B8%ED%85%94%EB%A6%AC%EB%B7%B0.txt?dl=1")
head(target)
target <-  Corpus(VectorSource(target)) #tm에만 맞춰진 클래스로 변경
class(target) #클래스 확인
target <- tm_map(target,stripWhitespace) #빈공간 삭제
#target <- tm_map(target,tolower
#한글이기 때문에 에러남
head(target)
View(target)
View(target)
library(tm)
library(wordcloud)
target <- readLines("https://www.dropbox.com/s/pramf3psg9cg2wa/%EC%84%9C%EC%9A%B8_%EC%8B%A0%EB%9D%BC%ED%98%B8%ED%85%94%EB%A6%AC%EB%B7%B0.txt?dl=1")
head(target)
target <-  VCorpus(VectorSource(target)) #tm에만 맞춰진 클래스로 변경
class(target) #클래스 확인
target <- tm_map(target,stripWhitespace) #빈공간 삭제
target <- tm_map(target,removePunctuation) #
target <- tm_map(target,PlainTextDocument) #
mystopword <- c(stopwords('english'),
"수 있는", "같습니다", "싶습니다",
"서울에서", "하고","은","이용했습니다",
"곳이예요") # 제외할 단어 더미 생성
target <-tm_map(target,removeWords,mystopword) #제외하기
findAssocs(target,"신라호텔",0.5) #관계어 찾기 마지막 숫자는 관계도
target <-as.matrix(target)
nrow(target) #열 수가 몇 개인지 확인
head(target)
head(target,20)
library(tm)
library(wordcloud)
target <- readLines("https://www.dropbox.com/s/pramf3psg9cg2wa/%EC%84%9C%EC%9A%B8_%EC%8B%A0%EB%9D%BC%ED%98%B8%ED%85%94%EB%A6%AC%EB%B7%B0.txt?dl=1")
head(target)
target <-  VCorpus(VectorSource(target)) #tm에만 맞춰진 클래스로 변경
class(target) #클래스 확인
target <- tm_map(target,stripWhitespace) #빈공간 삭제
target <- tm_map(target,removePunctuation) #
target <- tm_map(target,PlainTextDocument) #
mystopword <- c(stopwords('english'),
"수 있는", "같습니다", "싶습니다",
"서울에서", "하고","은","이용했습니다",
"곳이예요") # 제외할 단어 더미 생성
target <-tm_map(target,removeWords,mystopword) #제외하기
findAssocs(target,"신라호텔",0.5) #관계어 찾기 마지막 숫자는 관계도
library(tm)
library(wordcloud)
library(RColorBrewer)
target <- readLines("https://www.dropbox.com/s/pramf3psg9cg2wa/%EC%84%9C%EC%9A%B8_%EC%8B%A0%EB%9D%BC%ED%98%B8%ED%85%94%EB%A6%AC%EB%B7%B0.txt?dl=1")
head(target)
target <-  VCorpus(VectorSource(target)) #tm에만 맞춰진 클래스로 변경
class(target) #클래스 확인
target <- tm_map(target,stripWhitespace) #빈공간 삭제
target <- tm_map(target,removePunctuation) #
target <- tm_map(target,PlainTextDocument) #
mystopword <- c(stopwords('english'),
"수 있는", "같습니다", "싶습니다",
"서울에서", "하고","은","이용했습니다",
"곳이예요") # 제외할 단어 더미 생성
target <-tm_map(target,removeWords,mystopword) #제외하기
findAssocs(target,"신라호텔",0.5) #관계어 찾기 마지막 숫자는 관계도
target <-as.matrix(target)
mystopword <- c(stopwords('english'),
"수 있는", "같습니다", "싶습니다",
"서울에서", "하고","은","이용했습니다",
"곳이예요") # 제외할 단어 더미 생성
target <-tm_map(target,removeWords,mystopword) #제외하기
findAssocs(target,"신라호텔",0.5) #관계어 찾기 마지막 숫자는 관계도
findAssocs(target,"신라호텔",0.5) #관계어 찾기 마지막 숫자는 관계도
target <-as.matrix(target)
nrow(target) #열 수가 몇 개인지 확인
head(target)
target <-sort(rowSums(target),decreasing=T)
head(target,20)
pal <- brewer.pal(9,"Set9")
wordcloud(
names(target),
freq=target,
scale=c(5,1),
rot.per = 0.25,
min.freq =3,
random.order=F,
random.color=T,
colors=pal
)
findAssocs("target","신라호텔",0.5) #관계어 찾기 마지막 숫자는 관계도
head(target)
update.packages(checkBuilt = T,ask=F)
library(tm)
library(wordcloud)
library(RColorBrewer)
target <- readLines("https://www.dropbox.com/s/pramf3psg9cg2wa/%EC%84%9C%EC%9A%B8_%EC%8B%A0%EB%9D%BC%ED%98%B8%ED%85%94%EB%A6%AC%EB%B7%B0.txt?dl=1")
head(target)
target <-  VCorpus(VectorSource(target)) #tm에만 맞춰진 클래스로 변경
class(target) #클래스 확인
target <- tm_map(target,stripWhitespace) #빈공간 삭제
#target <- tm_map(target,tolower
#한글이기 때문에 에러남
head(target)
target <- tm_map(target,removePunctuation) #
target <- tm_map(target,PlainTextDocument) #
# 제외할 단어 더미 생성
mystopword <- c(stopwords('english'),
"수 있는", "같습니다", "싶습니다",
"서울에서", "하고","은","이용했습니다",
"곳이예요")
#제외하기
target <-tm_map(target,removeWords,mystopword)
findAssocs(target,"신라호텔",0.5) #관계어 찾기_x,terms,corlimit
library(tm)
library(wordcloud)
library(RColorBrewer)
target <- readLines("https://www.dropbox.com/s/pramf3psg9cg2wa/%EC%84%9C%EC%9A%B8_%EC%8B%A0%EB%9D%BC%ED%98%B8%ED%85%94%EB%A6%AC%EB%B7%B0.txt?dl=1")
head(target)
target <-  VCorpus(VectorSource(target)) #tm에만 맞춰진 클래스로 변경
class(target) #클래스 확인
target <- tm_map(target,stripWhitespace) #빈공간 삭제
#target <- tm_map(target,tolower
#한글이기 때문에 에러남
target <- tm_map(target,removePunctuation) #
target <- tm_map(target,PlainTextDocument) #
# 제외할 단어 더미 생성
mystopword <- c(stopwords('english'),
"수 있는", "같습니다", "싶습니다",
"서울에서", "하고","은","이용했습니다",
"곳이예요")
#제외하기
target <-tm_map(target,removeWords,mystopword)
head(target)
findAssocs(target,"신라호텔",0.5) #관계어 찾기_x,terms,corlimit
target <-as.matrix(target)
nrow(target) #열 수가 몇 개인지 확인
head(target)
if(!requireNamespace("tm")){install.packages("tm")}
if(!requireNamespace("wordcloud")){install.packages("wordcloud")}
update.packages(checkBuilt = T,ask=F)
library(tm)
library(wordcloud)
library(RColorBrewer)
target <- readLines("https://www.dropbox.com/s/pramf3psg9cg2wa/%EC%84%9C%EC%9A%B8_%EC%8B%A0%EB%9D%BC%ED%98%B8%ED%85%94%EB%A6%AC%EB%B7%B0.txt?dl=1")
head(target)
target <-  VCorpus(VectorSource(target)) #tm에만 맞춰진 클래스로 변경
class(target) #클래스 확인
target <- tm_map(target,stripWhitespace) #빈공간 삭제
#target <- tm_map(target,tolower
#한글이기 때문에 에러남
target <- tm_map(target,removePunctuation) #
target <- tm_map(target,PlainTextDocument) #
# 제외할 단어 더미 생성
mystopword <- c(stopwords('english'),
"수 있는", "같습니다", "싶습니다",
"서울에서", "하고","은","이용했습니다",
"곳이예요")
#제외하기
target <-tm_map(target,removeWords,mystopword)
head(target)
findAssocs(target,"신라호텔",0.5) #관계어 찾기_x,terms,corlimit
update.packages(checkBuilt = T,ask=F)
library(tm)
library(wordcloud)
library(RColorBrewer)
target <- readLines("https://www.dropbox.com/s/28n2omtacbbp2aw/%EC%84%9C%EC%9A%B8_%EC%8B%A0%EB%9D%BC%ED%98%B8%ED%85%94%EB%A6%AC%EB%B7%B0.txt?dl=1")
head(target)
target <- VCorpus(VectorSource(target))
class(target)
target <- tm_map(target,stripWhitespace)
#target <- tm_map(target,tolower)
target <- tm_map(target,removePunctuation)
target <- tm_map(target,PlainTextDocument)
target <- tm_map(target,removeNumbers)
mystopword <- c(stopwords('english'),
"수 있는","같습니다","싶습니다",
"서울에서","하고","은","이용했습니다",
"곳이예요"
)
target <- tm_map(target,removeWords,mystopword)
head(target)
target <- TermDocumentMatrix(target)
head(target)
findAssocs(target,"신라호텔",0.5)
target <- as.matrix(target)
nrow(target)
head(target)
target <- sort(rowSums(target),decreasing = T)
head(target,20)
pal <- brewer.pal(9,"Set3")
wordcloud(
names(target),
freq = target,
scale = c(5,1),
rot.per = 0.25,
min.freq = 2,
random.order = F,
random.color = T,
colors = pal
)
legend(
0.3,
1,
"서울 신라호텔 이용후기 분석",
cex = 0.8,
fill = NA,
border = NA,
bg = 'white',
text.col = "red",
text.font = 2,
box.col = "red"
)
# 제외할 단어 더미 생성
target <- tm_map(target,removeNumbers)
library(tm)
library(wordcloud)
library(RColorBrewer)
update.packages(checkBuilt = T,ask=F)
target <- readLines("https://www.dropbox.com/s/pramf3psg9cg2wa/%EC%84%9C%EC%9A%B8_%EC%8B%A0%EB%9D%BC%ED%98%B8%ED%85%94%EB%A6%AC%EB%B7%B0.txt?dl=1")
head(target)
target <-  VCorpus(VectorSource(target)) #tm에만 맞춰진 클래스로 변경
class(target) #클래스 확인
target <- tm_map(target,stripWhitespace) #빈공간 삭제
#target <- tm_map(target,tolower
#한글이기 때문에 에러남
target <- tm_map(target,removePunctuation) #
target <- tm_map(target,PlainTextDocument) #
# 제외할 단어 더미 생성
target <- tm_map(target,removeNumbers)
mystopword <- c(stopwords('english'),
"수 있는", "같습니다", "싶습니다",
"서울에서", "하고","은","이용했습니다",
"곳이예요")
#제외하기
target <-tm_map(target,removeWords,mystopword)
head(target)
findAssocs(target,"신라호텔",0.5) #관계어 찾기_x,terms,corlimit
target <-TermDocumentMatrix(target)
update.packages(checkBuilt = T,ask=F)
library(tm)
library(wordcloud)
library(RColorBrewer)
target <- readLines("https://www.dropbox.com/s/pramf3psg9cg2wa/%EC%84%9C%EC%9A%B8_%EC%8B%A0%EB%9D%BC%ED%98%B8%ED%85%94%EB%A6%AC%EB%B7%B0.txt?dl=1")
head(target)
target <-  VCorpus(VectorSource(target)) #tm에만 맞춰진 클래스로 변경
class(target) #클래스 확인
target <- tm_map(target,stripWhitespace) #빈공간 삭제
#target <- tm_map(target,tolower
#한글이기 때문에 에러남
target <- tm_map(target,removePunctuation) #
target <- tm_map(target,PlainTextDocument) #
# 제외할 단어 더미 생성
target <- tm_map(target,removeNumbers)
mystopword <- c(stopwords('english'),
"수 있는", "같습니다", "싶습니다",
"서울에서", "하고","은","이용했습니다",
"곳이예요")
#제외하기
target <-tm_map(target,removeWords,mystopword)
head(target)
target <-TermDocumentMatrix(target)
head(target)
update.packages(checkBuilt = T,ask=F)
library(tm)
library(wordcloud)
library(RColorBrewer)
target <- readLines("https://www.dropbox.com/s/28n2omtacbbp2aw/%EC%84%9C%EC%9A%B8_%EC%8B%A0%EB%9D%BC%ED%98%B8%ED%85%94%EB%A6%AC%EB%B7%B0.txt?dl=1")
head(target)
target <- VCorpus(VectorSource(target))#tm에만 맞춰진 클래스로 변경
class(target) #클래스 확인
target <- tm_map(target,stripWhitespace) #빈공간 삭제
#target <- tm_map(target,tolower)
#한글이기 때문에 에러남
target <- tm_map(target,removePunctuation) #
target <- tm_map(target,PlainTextDocument) #
target <- tm_map(target,removeNumbers)
# 제외할 단어 더미 생성
mystopword <- c(stopwords('english'),
"수 있는","같습니다","싶습니다",
"서울에서","하고","은","이용했습니다",
"곳이예요"
)
#제외하기
target <- tm_map(target,removeWords,mystopword)
head(target)
target <- TermDocumentMatrix(target)
head(target)
findAssocs(target,"신라호텔",0.5)#관계어 찾기_x,terms,corlimit
target <- as.matrix(target)
nrow(target) #열 수가 몇 개인지 확인
head(target)
target <- sort(rowSums(target),decreasing = T)
head(target,20)
pal <- brewer.pal(9,"Set9")
pal <- brewer.pal(9,"Set3")
wordcloud(
names(target),
freq = target,
scale = c(5,1),
rot.per = 0.25,
min.freq = 2,
random.order = F,
random.color = T,
colors = pal
)
legend(
0.3,
1,
"서울 신라호텔 이용후기 분석",
cex = 0.8,
fill = NA,
border = NA,
bg = 'white',
text.col = "red",
text.font = 2,
box.col = "red"
)
if(!requireNamespace("tm")){install.packages("tm")}
if(!requireNamespace("wordcloud")){install.packages("wordcloud")}
update.packages(checkBuilt = T,ask=F)
library(tm)
library(wordcloud)
library(RColorBrewer)
target <- readLines("https://www.dropbox.com/s/28n2omtacbbp2aw/%EC%84%9C%EC%9A%B8_%EC%8B%A0%EB%9D%BC%ED%98%B8%ED%85%94%EB%A6%AC%EB%B7%B0.txt?dl=1")
head(target)
target <- VCorpus(VectorSource(target))#tm에만 맞춰진 클래스로 변경
class(target) #클래스 확인
target <- tm_map(target,stripWhitespace) #빈공간 삭제
#target <- tm_map(target,tolower)
#한글이기 때문에 에러남
target <- tm_map(target,removePunctuation) #
target <- tm_map(target,PlainTextDocument) #
target <- tm_map(target,removeNumbers)
# 제외할 단어 더미 생성
mystopword <- c(stopwords('english'),
"수 있는","같습니다","싶습니다",
"서울에서","하고","은","이용했습니다",
"곳이예요"
)
#제외하기
target <- tm_map(target,removeWords,mystopword)
head(target)
target <- TermDocumentMatrix(target)
head(target)
findAssocs(target,"신라호텔",0.5)#관계어 찾기_x,terms,corlimit
target <- as.matrix(target)
nrow(target) #열 수가 몇 개인지 확인
head(target)
target <- sort(rowSums(target),decreasing = T)
head(target,20)
pal <- brewer.pal(9,"Set3")
wordcloud(
names(target),
freq = target,
scale = c(5,1),
rot.per = 0.25,
min.freq = 2,
random.order = F,
random.color = T,
colors = pal
)
legend(
0.3,
1,
"서울 신라호텔 이용후기 분석",
cex = 0.8,
fill = NA,
border = NA,
bg = 'white',
text.col = "red",
text.font = 2,
box.col = "red"
)
if(!requireNamespace("ggmap")){install.packages("wordcloud")}
library("ggmap", lib.loc="C:/Program Files/R/R-3.5.1/library")
detach("package:ggplot2", unload=TRUE)
library("ggplot2", lib.loc="C:/Program Files/R/R-3.5.1/library")
library(ggplot2)
library(ggmap)
if(!requireNamespace("ggmap")){install.packages("wordcloud")}
#구글맵을 처리하는 패키지 ggmap
update.packages(checkBuilt = T,ask=F)
library(tm)
library(wordcloud)
library(RColorBrewer)
library(ggplot2)
library(ggmap)
names <- c("1. 역삼더블루점",
"2. 역삼상록점",
"3. 역삼역점")
addr <- c("서울특별시 강남구 논현로63길 16",
"서울특별시 강남구 테헤란로43길 18",
"서울특별시 강남구 테헤란로25길 17")
(gc <- geocode(enc2utf8(addr))) #구글맵이 한글을 인식하지 못하기 때문에 #괄호를 씌워서 anonymous 함수를 만듬
(df<-data.frame(name=names,
lon=gc$loc,lat=gc$lat)) #위도경도
df<-data.frame(name=names,
lon=gc$loc,lat=gc$lat) #위도경도
if(!requireNamespace("ggmap")){install.packages("wordcloud")}
#구글맵을 처리하는 패키지 ggmap
update.packages(checkBuilt = T,ask=F)
library(tm)
library(wordcloud)
library(RColorBrewer)
library(ggplot2)
library(ggmap)
names <- c("1. 역삼더블루점",
"2. 역삼상록점",
"3. 역삼역점")
addr <- c("서울특별시 강남구 논현로63길 16",
"서울특별시 강남구 테헤란로43길 18",
"서울특별시 강남구 테헤란로25길 17")
(gc <- geocode(enc2utf8(addr))) #구글맵이 한글을 인식하지 못하기 때문에 #괄호를 씌워서 anonymous 함수를 만듬
(df<-data.frame(name=names,
lon=gc$loc,lat=gc$lat)) #위도경도
cen <- c(mean(df$lon),mean(df$lat))
if(!requireNamespace("ggmap")){install.packages("wordcloud")}
#구글맵을 처리하는 패키지 ggmap
update.packages(checkBuilt = T,ask=F)
library(tm)
library(wordcloud)
library(RColorBrewer)
library(ggplot2)
library(ggmap)
names <- c("1. 역삼더블루점",
"2. 역삼상록점",
"3. 역삼역점")
addr <- c("서울특별시 강남구 논현로63길 16",
"서울특별시 강남구 테헤란로43길 18",
"서울특별시 강남구 테헤란로25길 17")
(gc <- geocode(enc2utf8(addr))) #구글맵이 한글을 인식하지 못하기 때문에 #괄호를 씌워서 anonymous 함수를 만듬
(df<-data.frame(name=names,
lon=gc$loc,lat=gc$lat)) #위도경도
library(ggplot2)
library(ggmap)
library(ggplot2)
library(ggmap)
names <- c("1. 역삼더블루점",
"2. 역삼상록점",
"3. 역삼역점")
(gc<- geocode(enc2utf8("서울")))
(cen <- as.numeric(gc))
map <- get_googlemap(
center=cen,
zoom=10,
maptype = "roadmap"
)
ggmap(map)
map <- get_googlemap(
center=cen,
zoom=100,
maptype = "roadmap"
)
ggmap(map)
map <- get_googlemap(
center=cen,
zoom=50,
maptype = "roadmap"
)
ggmap(map)
map <- get_googlemap(
center=cen,
zoom=10,
maptype = "roadmap"
)
ggmap(map)
if(!requireNamespace("ggmap")){install.packages("ggmap")}
#구글맵을 처리하는 패키지 ggmap
update.packages(checkBuilt = T,ask=F)
if(!requireNamespace("ggmap")){install.packages("ggmap")}
#구글맵을 처리하는 패키지 ggmap
update.packages(checkBuilt = T,ask=F)
library(tm)
library(wordcloud)
library(RColorBrewer)
library(ggplot2)
library(ggmap)
names <- c("1. 역삼더블루점",
"2. 역삼상록점",
"3. 역삼역점")
addr <- c("서울특별시 강남구 논현로63길 16",
"서울특별시 강남구 테헤란로43길 18",
"서울특별시 강남구 테헤란로25길 17")
(gc <- geocode(enc2utf8(addr))) #구글맵이 한글을 인식하지 못하기 때문에 enc2utf8을 씀 #괄호를 씌워서 anonymous 함수를 만듬
(df<-data.frame(name=names,
lon=gc$loc,lat=gc$lat)) #위도경도
